{"version":3,"sources":["../../src/chart.tsx","App.js","index.js"],"names":["id","props","height","width","redraw","type","data","options","plugins","canvas","React","chart","setChart","computedData","merge","renderChart","updateChart","Chart","datasets","newDataSets","newChartData","currentDataSets","assign","currentDataSet","find","d","newDataSet","destroyChart","ref","randomInt","Math","floor","random","chartConfig","labels","label","backgroundColor","borderColor","borderWidth","scales","yAxes","ticks","beginAtZero","App","useState","setData","useEffect","interval","setInterval","clearInterval","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2e95d50.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport Chart from 'chart.js';\nimport merge from 'lodash/merge';\nimport assign from 'lodash/assign';\nimport find from 'lodash/find';\n\ninterface DataFn {\n    (canvas: HTMLCanvasElement | null): Chart.ChartData;\n}\n\ninterface Props {\n    id?: string;\n    height?: number;\n    width?: number;\n    redraw?: boolean;\n    type: Chart.ChartType;\n    data: Chart.ChartData | DataFn;\n    options?: Chart.ChartOptions;\n    plugins?: Chart.PluginServiceRegistrationOptions[];\n}\n\nconst ChartComponent = React.forwardRef((props: Props, ref) => {\n    const {\n        id,\n        height = 150,\n        width = 300,\n        redraw = false,\n        type,\n        data,\n        options = {},\n        plugins = [],\n    } = props;\n\n    const canvas = React.useRef<HTMLCanvasElement>(null);\n    const [chart, setChart] = React.useState<Chart | null>(null);\n\n    React.useImperativeHandle(ref, (): Chart | null => chart, [chart]);\n\n    const computedData = React.useMemo<Chart.ChartData>(\n        (): Chart.ChartData =>\n            typeof data === 'function' ? data(canvas.current) : merge({}, data),\n        [data, canvas.current]\n    );\n\n    const renderChart = (): void => {\n        if (canvas.current === null) return;\n\n        setChart(\n            new Chart(canvas.current, {\n                type,\n                data: computedData,\n                options,\n                plugins,\n            })\n        );\n    };\n\n    const updateChart = (): void => {\n        if (!chart) return;\n\n        if (options) {\n            chart.options = Chart.helpers.configMerge(chart.options, options);\n        }\n\n        if (!chart.config.data) {\n            chart.config.data = computedData;\n            chart.update();\n            return;\n        }\n\n        const { datasets: newDataSets = [], ...newChartData } = computedData;\n        const { datasets: currentDataSets = [] } = chart.config.data;\n\n        // copy values\n        assign(chart.config.data, newChartData);\n        chart.config.data.datasets = newDataSets.map(\n            (newDataSet: Chart.ChartDataSets): Chart.ChartDataSets => {\n                // given the new set, find it's current match\n                const currentDataSet = find(\n                    currentDataSets,\n                    (d: Chart.ChartDataSets): boolean =>\n                        d.label === newDataSet.label &&\n                        d.type === newDataSet.type\n                );\n\n                // There is no original to update, so simply add new one\n                if (!currentDataSet || !newDataSet.data) return newDataSet;\n\n                if (!currentDataSet.data) {\n                    currentDataSet.data = [];\n                } else {\n                    currentDataSet.data.splice(newDataSet.data.length);\n                }\n\n                // copy in values\n                assign(currentDataSet.data, newDataSet.data);\n\n                // apply dataset changes, but keep copied data\n                return {\n                    ...currentDataSet,\n                    ...newDataSet,\n                    data: currentDataSet.data,\n                };\n            }\n        );\n\n        chart.update();\n    };\n\n    const destroyChart = (): void => {\n        if (chart) chart.destroy();\n    };\n\n    React.useEffect((): (() => void) => {\n        renderChart();\n\n        return () => destroyChart();\n    }, []);\n\n    React.useEffect((): void => {\n        if (redraw) {\n            destroyChart();\n            renderChart();\n        } else {\n            updateChart();\n        }\n    }, [props]);\n\n    return <canvas height={height} width={width} ref={canvas} id={id} />;\n});\n\nexport default ChartComponent;\n","import React, { useEffect, useState } from 'react';\nimport ChartComponent from 'react-chart-js';\n\nconst randomInt = () => Math.floor(Math.random() * (10 - 1 + 1)) + 1;\n\nconst chartConfig = {\n    type: 'bar',\n    data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [\n            {\n                label: '# of Votes',\n                data: [12, 19, 3, 5, 2, 3],\n                backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(54, 162, 235, 0.2)',\n                    'rgba(255, 206, 86, 0.2)',\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(153, 102, 255, 0.2)',\n                    'rgba(255, 159, 64, 0.2)',\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                ],\n                borderWidth: 1,\n            },\n        ],\n    },\n    options: {\n        scales: {\n            yAxes: [\n                {\n                    ticks: {\n                        beginAtZero: true,\n                    },\n                },\n            ],\n        },\n    },\n};\n\nconst App = () => {\n    const [data, setData] = useState(chartConfig.data);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setData(data => ({\n                ...data,\n                datasets: [\n                    {\n                        ...data.datasets[0],\n                        data: [\n                            randomInt(),\n                            randomInt(),\n                            randomInt(),\n                            randomInt(),\n                            randomInt(),\n                            randomInt(),\n                        ],\n                    },\n                ],\n            }));\n        }, 2500);\n\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div className=\"content\">\n            <h1 className=\"header\">React Chart.JS Component Examples</h1>\n            <h2 className=\"title\">Line</h2>\n            <ChartComponent type=\"line\" options={chartConfig.options} data={data} />\n            <h2 className=\"title\">Bar</h2>\n            <ChartComponent type=\"bar\" options={chartConfig.options} data={data} />\n            <h2 className=\"title\">Horizontal Bar</h2>\n            <ChartComponent type=\"horizontalBar\" options={chartConfig.options} data={data} />\n            <h2 className=\"title\">Radar</h2>\n            <ChartComponent type=\"radar\" options={chartConfig.options} data={data} />\n            <h2 className=\"title\">Doughnut</h2>\n            <ChartComponent type=\"doughnut\" options={chartConfig.options} data={data} />\n            <h2 className=\"title\">Polar Area</h2>\n            <ChartComponent type=\"polarArea\" options={chartConfig.options} data={data} />\n            <h2 className=\"title\">Bubble</h2>\n            <ChartComponent type=\"bubble\" options={chartConfig.options} data={data} />\n            <h2 className=\"title\">Pie</h2>\n            <ChartComponent type=\"pie\" options={chartConfig.options} data={data} />\n            <h2 className=\"title\">Scatter</h2>\n            <ChartComponent type=\"scatter\" options={chartConfig.options} data={data} />\n        </div>\n    );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}